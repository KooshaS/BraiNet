package com.example.b2breceiver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

import com.example.androidsocketserver.R;
import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioTrack;
import android.os.Bundle;
import android.os.Handler;
import android.util.FloatMath;
import android.util.Log;
import android.widget.TextView;
 
public class Server extends Activity {
 
	private TextView text;
	
	private ServerSocket serverSocket;
    Handler updateConversationHandler; 
    Thread serverThread = null; 
    public static final int SERVERPORT = 6000;
    
    private static final int BUFLEN = 32 * 1024;
    static final int RATE = 44100;
    short[] left = new short[BUFLEN], right = new short[BUFLEN];
    SoundGen sound;
    int freq = 600, offset = 10;
    int f1, f2;
    boolean isMono = true;
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
 
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
 
        text = (TextView) findViewById(R.id.text2);
 
        updateConversationHandler = new Handler();
 
        this.serverThread = new Thread(new ServerThread());
        this.serverThread.start();
        
        int minSize = 
                AudioTrack.getMinBufferSize(RATE, AudioFormat.CHANNEL_OUT_STEREO,
                                            AudioFormat.ENCODING_PCM_16BIT);
            log("min size " + minSize + " sample " + 
                AudioTrack.getNativeOutputSampleRate(AudioTrack.MODE_STREAM));
 
    }
 
    @Override
    protected void onStop() {
        super.onStop();
        try {
            serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 
    class ServerThread implements Runnable {
 
        public void run() {
            Socket socket = null;
            try {
                serverSocket = new ServerSocket(SERVERPORT);
            } catch (IOException e) {
                e.printStackTrace();
            }
            while (!Thread.currentThread().isInterrupted()) {
 
                try {
 
                    socket = serverSocket.accept();
 
                    CommunicationThread commThread = new CommunicationThread(socket);
                    new Thread(commThread).start();
 
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 
    class CommunicationThread implements Runnable {
 
        private Socket clientSocket;
        private BufferedReader input;
 
        public CommunicationThread(Socket clientSocket) {
 
            this.clientSocket = clientSocket;
 
            try {
                this.input = new BufferedReader(new InputStreamReader(this.clientSocket.getInputStream()));
 
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
 
        public void run() {
 
            while (!Thread.currentThread().isInterrupted()) {
 
                try { 
                    String read = input.readLine(); 
                    updateConversationHandler.post(new updateUIThread(read));
                                                          
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
 
    }
 
    class updateUIThread implements Runnable {
        private String msg;
 
        public updateUIThread(String str) {
            this.msg = str;
                       
        }
 
        @Override
        public void run() {
            text.append(" " + msg + "\n");
            
            if (msg.equals("0")) {
            	isMono = true;
            	
            } else if (msg.equals("1")) {
            	isMono = false;            	            	
            }
            
            updateFreq();
                       
        }        
    }
    
    void updateFreq() {
        int p1, p2;
        int f = freq;
        while (true) {
            f1 = f;
            f2 = f1 + offset;
            p1 = samplePeriod(f1);
            p2 = samplePeriod(f2);
            if (p1 <= BUFLEN && p2 <= BUFLEN) {
                break;
            }
            log("retry " + f + ' ' + f1 + ' ' + f2 + ' ' + p1 + ' ' + p2);
            --f;
        }
        genBuf(left,  f1, p1);
        genBuf(right, f2, p2);
        sound.update(left, right, p1, p2, isMono);
	
    }

    static int samplePeriod(int freq) {
        return RATE / gcd(RATE, freq);
    }

    static int gcd(int a, int b) {
        while (b != 0) {
            int saveB = b;
            b = a % b;
            a = saveB;
        }
        return a;
    }

    static void genBuf(short[] buf, int f, int period) {
        final float STEP = (float) (Math.PI * 2 * f / RATE);
        final float SCALE = (1 << 14); //  - 100;
        for (int i = 0; i < period; ++i) {
            buf[i] = (short) Math.round(FloatMath.sin(i * STEP) * SCALE);
        }
    }

    public void onResume() {
        super.onResume();
        sound = new SoundGen();
        updateFreq();
        sound.start();
    }

    public void onPause() {
        super.onPause();
        sound.requestStop();
        sound = null;
    }

    static void log(String mes) {
        if (true) {
            Log.d("Binaural", mes);
        }
    }
}

